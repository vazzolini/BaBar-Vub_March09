
// ---------------------------------------------------------------------- 
void recoilNtp::initRest() {
  DR = 57.29577951;
  PCBIN = 30;
  PCMAX = 3.0;
  PLBIN = 40;
  PLMAX = 4.0;
  FBIN = 36;
  B0LUND = 511;
  CHBLUND = 521;

  for (int i = 0; i < 100; ++i) fReturnLog[i] = 0; 

  XMAX = 5.;
  XBIN = 50;

  ELMASS  = 0.000511;
  MUMASS  = 0.10567;

  PIPMASS = 0.13957; 
  PIZMASS = 0.13498;
  KAPMASS = 0.49368;
  KAZMASS = 0.49767;
  BPMASS  = 5.2790;
  BZMASS  = 5.2794;
  BMASS   = 5.2792;
  BQMASS  = 4.800;
  A0      = 1.29;

  fOptBlind = fOptGammas = fOptCategories = fOptKlongs = fOptMakeEventList 
    = fOptPidKilling = fOptPidKillingKaon = fOptPidKillingEl = fOptPidKillingMu 
    = fOptSmearTracks = fOptSmearNeut = fOptScaleKlongs = 0;

  fOptFilterK0sPi0Pi0 = 1010000;// run number before which we need to apply the Ks bug fix

  // -- CUTS
  DESIGNALLO = -0.1; 
  DESIGNALHI =  0.1; 

  MESSIGNALLO   =  5.27; 
  MESSIGNALHI   =  5.29; 

  MESSIDEBANDLO = 5.20; 
  MESSIDEBANDHI = 5.26; 

  MESSIGNALBANDLO = 5.27; 
  MESSIGNALBANDHI = 5.29; 

  PURITY     = 0.;
  INTPURITY  = 0.;
  IPURDSTAR  = 0.;
  IPURDC     = 0.;
  IPURDSTAR0 = 0.;
  IPURD0     = 0.;

  TLABLO = 23.5;  // BAD 90 
  TLABHI = 135.8;

  PCMSLO = 1.0;
  PLABLO = 0.5;
  NLEPTON = 1;
  ELMOMLO = 1.0;
  MUMOMLO = 1.0;
  KAMOMLO = 0.1;
  //  IDEL = IDMU = IDKA = 16; 
  IDEL = 32;
  IDMU = 8; 
  IDKA = 4; 

  MM2LO = -9999.;

  fParametrization = 0; // default: old parametrization for (CT,AS)

  REQTOTALCHARGE = 1.;
  REQCHARGECORR  = kTRUE; 

  KSPIPLO = KSPIZLO = 0.2;
  KSPIPHI = KSPIZHI = 0.8;
  KSPIPRLO = -1.;
  PTLO = 0.000;
 
  GAMMAELO = 0.080;
  GAMMALTLO = 0.080;
  GAMMAEHI = 100.0;
  
  fRunRange = TString("undefined"); 
  fHistFile = 0;
  fDump = 0;
  fVerbose = 0;
  fIsMakeParam = kFALSE;

  Int_t i(0);
  for (i = 0; i < 100; ++i) { 
    recEl[i] = recMu[i] = recKa[i] = 0;
    kshortLockTrk[i] = 0; 
    kshortLockGam[i] = 0; 
    goodKshort[i] = 0;
  }

  // -- Get default Trk and Pid tables
  SMEARELPIDTABLES = 0;
  SMEARMUPIDTABLES = 0;
  SMEARKAPIDTABLES = 0;
  SMEARELMISTABLES = 0;
  SMEARMUMISTABLES = 0;
  SMEARKAMISTABLES = 0;
  sprintf(TRKTABLES, "TrkTables.txt");
  //  getTrkTables();
  SMEARTRKPX = SMEARTRKPY = 1.3;
  SIGMANEUT = 0.02;
  SHIFTNEUT = -0.0075;
  
  TRACKSELECTION = PHOTONSELECTION = ALTPHOTONSEL = 0; 
  DOTRACKKILLING = 0; 
  SLOWPIONKILL = 0.016;
  TRACKKILL = 0.013;

  DOBREMRECOVERY = 0;

  sprintf(PIDTABLES, "PidTables.txt");
  //  getPidTables();

  sprintf(WEIGHTNEU, "tableneu.dat");

  sprintf(WEIGHTCHG, "tablechg.dat");

  int therandom(0);
  Dvar = new recoilDSys("ddecay.table",therandom,2);
  Bsem = new recoilDSys(therandom);
  DOBDECWEIGHT = DODDECWEIGHT = 1;
  DOEXCLUSIVE = 0;
}

// ----------------------------------------------------------------------
void recoilNtp::initVariables() {
  TLorentzVector p4Null(0., 0., 0., 0.);
  fRunnumber = fLower = fUpper = -99;
  fEvtW8 = 1.; 
  fWithKKbar = 0; 
  
  // -- Cuts
  fOneLepton = kFALSE;
  fGoodPRMM2 = fGoodMM2 = fGoodChargeCorr = fGoodChargeCons = fGoodEvent = fLowMx = kFALSE;

  fGoodAccLepton = fGoodAccElectron = fGoodAccMuon = kFALSE; 
  // need fGoodAccERS? -> that' s "faoRS"

  fGoodLepton    = fGoodElectron    = fGoodMuon    = kFALSE;  
  fGoodRS        = fGoodERS         = fGoodMRS     = kFALSE; 
  fGoodWS        = fGoodEWS         = fGoodMWS     = kFALSE; 
  fGoodRF        = fGoodERF         = fGoodMRF     = kFALSE; 
  fGoodWF        = fGoodEWF         = fGoodMWF     = kFALSE; 

  faoLepton = faoElectron = faoMuon = kFALSE; 
  faoRS     = faoERS      = faoMRS  = kFALSE; 
  faoWS     = faoEWS      = faoMWS  = kFALSE; 
  faoRF     = faoERF      = faoMRF  = kFALSE; 
  faoWF     = faoEWF      = faoMWF  = kFALSE; 

  faoPRMM2   = faoPRMM2E   = faoPRMM2M   = kFALSE; 
  faoPRMM2RS = faoPRMM2ERS = faoPRMM2MRS = kFALSE; 
  faoPRMM2WS = faoPRMM2EWS = faoPRMM2MWS = kFALSE; 
  faoPRMM2RF = faoPRMM2ERF = faoPRMM2MRF = kFALSE; 
  faoPRMM2WF = faoPRMM2EWF = faoPRMM2MWF = kFALSE; 

  faoMM2   = faoMM2E   = faoMM2M   = kFALSE; 
  faoMM2RS = faoMM2ERS = faoMM2MRS = kFALSE; 
  faoMM2WS = faoMM2EWS = faoMM2MWS = kFALSE; 
  faoMM2RF = faoMM2ERF = faoMM2MRF = kFALSE; 
  faoMM2WF = faoMM2EWF = faoMM2MWF = kFALSE; 
  
  faoChargeCons   = faoChargeConsE   = faoChargeConsM   = kFALSE; 
  faoChargeConsRS = faoChargeConsERS = faoChargeConsMRS = kFALSE;
  faoChargeConsWS = faoChargeConsEWS = faoChargeConsMWS = kFALSE; 
  faoChargeConsRF = faoChargeConsERF = faoChargeConsMRF = kFALSE;
  faoChargeConsWF = faoChargeConsEWF = faoChargeConsMWF = kFALSE;

    

  // -- MC Truth 
  p4XhadGen = p4MissGen = p4RecoilGen = p4LeptonGen = p4Null;

  fQ2Gen = fKplus = fMxhadGen = fPxhadGen = fTxhadGen = fFxhadGen = fExhadGen = -99.;
  fQ2GenwPh = fMxhadGenwoPh = fPxhadGenwoPh = fTxhadGenwoPh = fFxhadGenwoPh = fExhadGenwoPh = -99.;
  fMxhadRes = fMxhadfitRes = -99.;
  fPcmsGen = fTcmsGen = fFcmsGen = fEcmsGen = -99.;
   fctvGen =fctlGen =fchiGen = -99.;
  fPcmsGenwPh = fTcmsGenwPh = fFcmsGenwPh = fEcmsGenwPh = -99.;
  fB1Index = fB2Index = fBVxb = fBVxbTyp = -99;
  fMxCategory = 0;
  fDpi = fDpiz = fDk = fDks = fDkmiss= fDlep = fDCfDs = fD0CfDs = 0;
  fDkl = fDkspiopio = fDkspipi = 0;
  // -- Reco
  p4Brecoil = p4Breco = p4BrecoNC = p4BrecoGen = p4BrecoGenSmear = p4Null;

  lundB = fSeedMode = fBmode = -999999;
  
  mesSideband = mesSignalband = signalBox = vubDepleted = kFALSE;
  fNLeptonMC = 0; 
  genLeptonCharge = fBrecoCharge; 
  fBrecoFlavor = 0;

  fBrecoQual = 0;
  fchgDau = 0;
  fneuDau = 0;

  fVub =  fVcb =  fOther =  0;
  fBrecoMc = -99;
  fNlep = fNLepton = fNEl = fNMu = fNKshort = fNKp = 0;

  fPurity = fIntPurity = -99.;
  fMes = fDeltaE = fBmass = -99.;
 
  fQtot = -99; 
  fNneutrals = fNtracks = -99.;
  fRecoilCharge = fLeptonCharge = fRecoilTrkMult = fRecoilNutMult = 0;
  fRecoilNutMult80_160 = fRecoilNutMult160_320 = fRecoilNutMultfromB = fRecoilNutMultfromB80_160 = fRecoilNutMultfromB160_320 = 0;
  fIsPrompt = fIsCascade = fElectron = fMuon = kFALSE;  
  fEffCat = 0;

  fGammaMax = fQ2 = fQ2NC = fQ2Fit = fQ2Res = -99.;
  fPNu = fTNu = fFNu = fEmiss = fMM2 = -99.;
  fPNuNC = fTNuNC = fFNuNC = fEmissNC = fMM2NC = -99.;
  fPlab = fTlab = fFlab = fPcms = fTcms = fFcms = fEcms = fPups = -99.;
  fPxhadchg = fMxhadchg = fTxhadchg = fExhadchg = fFxhadchg = -99.;
  fPxhadnu = fMxhadnu = fTxhadnu = fExhadnu = fFxhadnu = -99.;
  fPxhad = fTxhad = fFxhad = fExhad = fMxhad = -99.;
  fPrecoil = fTrecoil = fFrecoil = fErecoil = fMrecoil = -99.;
  fBmassfit = fMxhadfit = fMM2fit = fQ2Fit = 0.;
  fPAllev = fTAllev = fFAllev = fEAllev = fMAllev =-99.; 
  fProbChi2 = fChi2 = -99.;

  // exclusive modes stuff  -----------------
  fMM2pi = fmompi = fthpi = fphipi = -999.;	
  fMpi0 = fNrecopi0 = fMM2pi0 = fMM2gamma = ftruemom1phpi0 = ftruemom2phpi0 = fmompi0 = fthpi0 = fphipi0 = fmom1phpi0 = fmom2phpi0 = ftruemomlab1phpi0 = ftruemomlab2phpi0 = ftrueth1phpi0 = ftrueth2phpi0 = -999.; 
  ftrueMrho = fNrecorho = fMrho = fMM2rho = ftruemompirho = ftruemompi0rho = fmomrho = fthrho = fphirho = fmompirho = fmompi0rho = -999.;
  ftrueMrho0 = fNrecorho0 = fMrho0 = fMM2rho0 = ftruemom1pirho0 = ftruemom2pirho0 = fmomrho0 = fthrho0 = fphirho0 = fmom1pirho0 = fmom2pirho0 = fMomrho0ph = -999.;
  ftrueMomega = fNrecoomega = fMomega = fMM2omega = ftruemom1piome = ftruemom2piome = ftruemompi0ome = fmomomega = fthomega = fphiomega = fmom1piome = fmom2piome = fmompi0ome = ftruedalitzpi1pi2ome = ftruedalitzpi1pi0ome = fdalitzpi1pi2ome = fdalitzpi1pi0ome = ftruecosthome = fcosthome = -999.;
  fmometa = ftheta = fphieta = fMM2etagg = fMetagg = fMM2etapppi0 = fMetapppi0 = fMM2etapi0pi0pi0 = fMetapi0pi0pi0 = fMM2eta = fMeta = fEtaflag = fEtapmassetadau = -999.;	
  fModeeta = 0;
  fmometap = fthetap = fphietap = fMM2etaprho0g = fMetaprho0g = fMM2etapetapp = fMetapetapp = fMM2etap = fMetap = fEtapflag = -999.;	
  fModeetap = 0;
  fmoma0 = ftha0 = fphia0 = fNrecoa0 = fMa0 = fMM2a0 = fa0massetadau = -999.;  
  fmoma0p = ftha0p = fphia0p = fNrecoa0p = fMa0p = fMM2a0p = fa0pmassetadau = -999.; 
  fModea0 = 0;		 	
  fModea0p = 0;		 	

  // --------
	
  for (int i=0; i<100; i++){
    weightTrk[i] = 1;
    weightNeu[i] = 1;    

    loopTrack[i] = 0; 

    isBremPhoton[i] = 0;
  }
 
  for (int i=0; i<100; i++){
    pi0dau1index[i]=-999;
    pi0dau2index[i]=-999;    
    rho0dau1index[i]=-999;
    rho0dau2index[i]=-999;    
    gammafrompi0[i] = 0;    
  }

  for (int i=0; i<80; i++){
    etadau1index[i]=-999;
    etadau2index[i]=-999;    
    etadau1index[i]=-999;
    etadau1lund[i]=-999;
    etadau2lund[i]=-999;    
    etadau3lund[i]=-999;
  }

  // -- Some event quantities
  fRunnumber = runNumber;
  fLower = lowerID; 
  fUpper = upperID; 



}




// ----------------------------------------------------------------------
void recoilNtp::readCuts(TString filename, int dump) {
  char  buffer[200];
  fCutFile = filename;
  cout << "Reading " << filename.Data() << " for cut settings" << endl;
  sprintf(buffer, "%s", filename.Data());
  ifstream is(buffer);
  char CutName[100], tablefile[1000];
  float CutValue;
  int ok(0);
  for(int i=0; i<20; i++){
    theweighttrk[i] = 1;
    theweightneu[i] = 1;
  }

  while (is.getline(buffer, 200, '\n')) {
    ok = 0;
    if (buffer[0] == '#') {continue;}
    if (buffer[0] == '/') {continue;}
    sscanf(buffer, "%s %f", CutName, &CutValue);
    // -- breco 
    if (!strcmp(CutName, "mesSignalLo")) {MESSIGNALLO   = CutValue; ok = 1;}
    if (!strcmp(CutName, "mesSignalHi")) {MESSIGNALHI   = CutValue; ok = 1;}
    if (!strcmp(CutName, "mesSidebandLo")) {MESSIDEBANDLO = CutValue; ok = 1;}
    if (!strcmp(CutName, "mesSidebandHi")) {MESSIDEBANDHI = CutValue; ok = 1;}
    if (!strcmp(CutName, "mesSignalbandLo")) {MESSIGNALBANDLO = CutValue; ok = 1;}
    if (!strcmp(CutName, "mesSignalbandHi")) {MESSIGNALBANDHI = CutValue; ok = 1;}
    if (!strcmp(CutName, "deSignalLo")) {DESIGNALLO = CutValue; ok = 1;}
    if (!strcmp(CutName, "deSignalHi")) {DESIGNALHI = CutValue; ok = 1;}
    if (!strcmp(CutName, "purity")) {PURITY = CutValue; ok = 1;}
    if (!strcmp(CutName, "intPurity")) {INTPURITY = CutValue; ok = 1;}
    if (!strcmp(CutName, "ipurDstar"))  {IPURDSTAR = CutValue; ok = 1;}
    if (!strcmp(CutName, "ipurDc"))     {IPURDC = CutValue; ok = 1;}
    if (!strcmp(CutName, "ipurDstar0")) {IPURDSTAR0 = CutValue; ok = 1;}
    if (!strcmp(CutName, "ipurD0"))     {IPURD0 = CutValue; ok = 1;}

    // -- Lepton 
    if (!strcmp(CutName, "pcmsLo")) {PCMSLO = CutValue; ok = 1;}
    if (!strcmp(CutName, "plabLo")) {PLABLO = CutValue; ok = 1;}
    if (!strcmp(CutName, "tlabLo")) {TLABLO = CutValue; ok = 1;}
    if (!strcmp(CutName, "tlabHi")) {TLABHI = CutValue; ok = 1;}
    if (!strcmp(CutName, "nLepton")) {NLEPTON = int(CutValue); ok = 1;}
    if (!strcmp(CutName, "elmomLo")) {ELMOMLO = CutValue; ok = 1;}
    if (!strcmp(CutName, "mumomLo")) {MUMOMLO = CutValue; ok = 1;}
    if (!strcmp(CutName, "kamomLo")) {KAMOMLO = CutValue; ok = 1;}
    if (!strcmp(CutName, "idEl")) {IDEL = int(CutValue); ok = 1;}
    if (!strcmp(CutName, "idMu")) {IDMU = int(CutValue); ok = 1;}
    if (!strcmp(CutName, "idKa")) {IDKA = int(CutValue); ok = 1;}

    // -- recoil
    if (!strcmp(CutName, "prmm2")) {PRMM2 = CutValue; ok = 1;}
    if (!strcmp(CutName, "mm2Lo")) {MM2LO = CutValue; ok = 1;}
    if (!strcmp(CutName, "mm2Hi")) {MM2HI = CutValue; ok = 1;}
    if (!strcmp(CutName, "reqChargeCoor")) {REQCHARGECORR = (CutValue > 0.5) ?  kTRUE: kFALSE; ok = 1;}
    if (!strcmp(CutName, "reqTotalCharge")) {REQTOTALCHARGE = CutValue; ok = 1;}
    if (!strcmp(CutName, "kspipLo")) {KSPIPLO = CutValue; ok = 1;}
    if (!strcmp(CutName, "kspipHi")) {KSPIPHI = CutValue; ok = 1;}
    if (!strcmp(CutName, "kspipRlo")) {KSPIPRLO = CutValue; ok = 1;}
    if (!strcmp(CutName, "kspizLo")) {KSPIZLO = CutValue; ok = 1;}
    if (!strcmp(CutName, "kspizHi")) {KSPIZHI = CutValue; ok = 1;}
    if (!strcmp(CutName, "ptLo"))    {PTLO = CutValue; ok = 1;}
    if (!strcmp(CutName, "gammaELo")) {GAMMAELO = CutValue; ok = 1;}
    if (!strcmp(CutName, "gammaltLo")) {GAMMALTLO = CutValue; ok = 1;}
    if (!strcmp(CutName, "gammaEHi")) {GAMMAEHI = CutValue; ok = 1;}
    if (!strcmp(CutName, "smearTrkPx"))  {SMEARTRKPX = CutValue; ok = 1;}
    if (!strcmp(CutName, "smearTrkPy"))  {SMEARTRKPY = CutValue; ok = 1;}
    if (!strcmp(CutName, "sigmaNeut")) {SIGMANEUT  = CutValue; ok = 1;}
    if (!strcmp(CutName, "shiftNeut")) {SHIFTNEUT  = CutValue; ok = 1;}
    if (!strcmp(CutName, "trackSelection")) {TRACKSELECTION = CutValue; ok = 1;}
    if (!strcmp(CutName, "trackKilling"))   {DOTRACKKILLING = (int)CutValue; ok = 1;}
    if (!strcmp(CutName, "bremrecovery")) {DOBREMRECOVERY = int(CutValue); ok = 1;}
    if (!strcmp(CutName, "slowPionKill"))   {SLOWPIONKILL = CutValue; ok = 1;}
    if (!strcmp(CutName, "trackKill")   )   {TRACKKILL = CutValue; ok = 1;}
    if (!strcmp(CutName, "kFitPara")) {fParametrization = CutValue; ok = 1;}
    if (!strcmp(CutName, "photonSelection")) {PHOTONSELECTION = CutValue; ok = 1;}
    if (!strcmp(CutName, "altphotonSel")) {ALTPHOTONSEL = CutValue; ok = 1;}

    if (!strcmp(CutName, "DoBdecayWeight")) {DOBDECWEIGHT = CutValue; ok = 1;}
    if (!strcmp(CutName, "DoDdecayWeight")) {DODDECWEIGHT = CutValue; ok = 1;}

    if (!strcmp(CutName, "DoExclusive")) {DOEXCLUSIVE = int(CutValue); ok = 1;}


    // -- Pidmaps and trk efficiency tables
    if (!strcmp(CutName, "smearElPidTables")) {SMEARELPIDTABLES = CutValue; ok = 1;}
    if (!strcmp(CutName, "smearMuPidTables")) {SMEARMUPIDTABLES = CutValue; ok = 1;}
    if (!strcmp(CutName, "smearKaPidTables")) {SMEARKAPIDTABLES = CutValue; ok = 1;}
    if (!strcmp(CutName, "smearElMisTables")) {SMEARELMISTABLES = CutValue; ok = 1;}
    if (!strcmp(CutName, "smearMuMisTables")) {SMEARMUMISTABLES = CutValue; ok = 1;}
    if (!strcmp(CutName, "smearKaMisTables")) {SMEARKAMISTABLES = CutValue; ok = 1;}
    if (!strcmp(CutName, "PidTables")) {
      sscanf(buffer, "%s %s", CutName, tablefile);
      sprintf(PIDTABLES, "%s", tablefile); ok = 1;
      getPidTables();
    } 
    if (!strcmp(CutName, "TrkTables")) {
      sscanf(buffer, "%s %s", CutName, tablefile);
      sprintf(TRKTABLES, "%s", tablefile); ok = 1;
      getTrkTables();
    }

    if (!strcmp(CutName, "ReweightTrkTables")) {
      sscanf(buffer, "%s %s", CutName, tablefile);
      sprintf(WEIGHTCHG, "%s", tablefile);
      readweightchg();
      cout << "USING TRACKING REWEIGHTING " << WEIGHTCHG << endl;
      ok = 1;
    }

    if (!strcmp(CutName, "ReweightNeuTables")) {
      sscanf(buffer, "%s %s", CutName, tablefile);
      sprintf(WEIGHTNEU, "%s", tablefile);
      readweightneu();
      cout << "USING NEUTRALS REWEIGHTING " << WEIGHTNEU << endl;
      ok = 1;
    } 

    if (ok == 0)  cout << "==> recoilNtp::readCuts() Error: Don't know about variable " << CutName << endl;
  }

  if (dump == 1) dumpCuts();

  readintpur();
}



// ----------------------------------------------------------------------
void recoilNtp::dumpCuts() {
  cout << "====================================" << endl;
  cout << "Cut file " << fCutFile << endl; 
  cout << "------------------------------------" << endl;
  cout << "mesSignal:         " << MESSIGNALLO << " ... " << MESSIGNALHI << endl;
  cout << "mesSideband:       " << MESSIDEBANDLO << " ... " << MESSIDEBANDHI << endl;
  cout << "mesSignalband:     " << MESSIGNALBANDLO << " ... " << MESSIGNALBANDHI << endl;
  cout << "deSignal:          " << DESIGNALLO << " ... " << DESIGNALHI << endl;
  cout << "purity:            " << PURITY << endl;
  cout << "intPurity:         " << INTPURITY << endl;
  cout << "ipurDstar:         " << IPURDSTAR << endl;
  cout << "ipurDc:            " << IPURDC << endl;
  cout << "ipurDstar0:        " << IPURDSTAR0 << endl;
  cout << "ipurD0:            " << IPURD0 << endl;

  cout << "pcmsLo:            " << PCMSLO << endl;
  cout << "plabLo:            " << PLABLO << endl;
  cout << "tlabLo:            " << TLABLO << endl;
  cout << "tlabHi:            " << TLABHI << endl;
  cout << "nLepton:           " << NLEPTON << endl;
  cout << "elmomLo:           " << ELMOMLO << endl;
  cout << "mumomLo:           " << MUMOMLO << endl;
  cout << "kamomLo:           " << KAMOMLO << endl;
  cout << "idEl:              " << IDEL << endl;
  cout << "idMu:              " << IDMU << endl;
  cout << "idKa:              " << IDKA << endl;

  cout << "killTracks:        " << (DOTRACKKILLING & 1 ? 1 : 0) << " with probability " << SLOWPIONKILL << endl;
  cout << "killSlowPions:     " << (DOTRACKKILLING & 2 ? 1 : 0) << " with probability " << TRACKKILL <<  endl;
  cout << "smearTrkPx:        " << SMEARTRKPX << endl;
  cout << "smearTrkPy:        " << SMEARTRKPY << endl;
  cout << "kfitPara:          " << fParametrization << endl;
  cout << "trackSelection:    " << TRACKSELECTION << endl;
  cout << "doTrackKilling:    " << DOTRACKKILLING << endl;
  cout << "photonSelection:   " << PHOTONSELECTION << endl;
  cout << "altphotonSel:      " << ALTPHOTONSEL << endl;
  cout << "smearElPidTables:  " << SMEARELPIDTABLES << endl;
  cout << "smearMuPidTables:  " << SMEARMUPIDTABLES << endl;
  cout << "smearKaPidTables:  " << SMEARKAPIDTABLES << endl;
  cout << "smearElMisTables:  " << SMEARELMISTABLES << endl;
  cout << "smearMuMisTables:  " << SMEARMUMISTABLES << endl;
  cout << "smearKaMisTables:  " << SMEARKAMISTABLES << endl;

  cout << "bremrecovery:      " << DOBREMRECOVERY << endl;


  cout << "prmm2:             " << PRMM2 << endl;
  cout << "mm2Lo:             " << MM2LO << endl;
  cout << "mm2Hi:             " << MM2HI << endl;
  cout << "reqChargeCoor:     " << (REQCHARGECORR ?  "true": "false") << endl;
  cout << "reqTotalCharge:    " << REQTOTALCHARGE << endl;
  cout << "kspip:             " << KSPIPLO << " ... " << KSPIPHI << endl;
  cout << "kspiz:             " << KSPIZLO << " ... " << KSPIZHI << endl;
  cout << "kspipRlo:          " << KSPIPRLO << endl;
  cout << "pTLo:              " << PTLO << endl;
  cout << "GammaE:            " << GAMMAELO << " ... " << GAMMAEHI << endl;
  cout << "GammaEalt:            " << GAMMALTLO << endl;

  cout << "DoBdecayWeight:    " << DOBDECWEIGHT << endl;
  cout << "DoDdecayWeight:    " << DODDECWEIGHT << endl;

  cout << "DoExclusive:       " << DOEXCLUSIVE << endl;

  cout << "====================================" << endl;
}


// ----------------------------------------------------------------------
void recoilNtp::getTrkTables() {
  cout << "Reading TrkTables from " << TRKTABLES << endl;
  ifstream is(TRKTABLES);
  char tableName[1000], buffer[100], fname[100];
  int ok(0);
  while (is.getline(buffer, 200, '\n')) {
    if (buffer[0] == '#') {continue;}
    sscanf(buffer, "%s", tableName);
    cout << tableName << endl;
    sprintf(fname, "trk%d", ok);
    //    fTT[ok].flush();
    fTT[ok] = new TRKTable(tableName, fname);
    ++ok;
  }
}    



// ----------------------------------------------------------------------
void recoilNtp::getPidTables() {
  cout << "Reading PidTables from " << PIDTABLES << "  " << SMEARELPIDTABLES << "  " << SMEARELMISTABLES << endl;
  ifstream is(PIDTABLES);
  char tableName[1000], selector[100], buffer[1000], fname[200];
  int el(0), mu(0), ka(0), source(0), sink(0);
  while (is.getline(buffer, 200, '\n')) {
    if (buffer[0] == '#') {continue;}
    sscanf(buffer, "%s %d %s %d", tableName, &source, selector, &sink);
    if (TMath::Abs(sink) == 11) {
      cout << "Electron Table " << el << "  ->  " << tableName << endl;
      sprintf(fname, "%s%d_%d", selector, sink, source); 
      //      fPTel[el].flush();
      fPTel[el] = new PIDTable(tableName, fname);
      if (TMath::Abs(source) == TMath::Abs(sink)) {
	cout << "shifting el pidtables relative by " << SMEARELPIDTABLES << endl;
	if (TMath::Abs(SMEARELPIDTABLES) > 0.001) fPTel[el]->shiftRel(SMEARELPIDTABLES);
      } else {
	cout << "shifting el misdtables relative by " << SMEARELMISTABLES << endl;
	if (TMath::Abs(SMEARELMISTABLES) > 0.001) fPTel[el]->shiftRel(SMEARELMISTABLES);
      }
      el++;
    }
    if (TMath::Abs(sink) == 13) {
      cout << "Muon Table " << mu << "  ->  " << tableName << endl;
      sprintf(fname, "%s%d_%d", selector, sink, source); 
      //      fPTmu[mu].flush();
      fPTmu[mu] = new PIDTable(tableName, fname);
      if (TMath::Abs(source) == TMath::Abs(sink)) {
	cout << "shifting mu pidtables relative by " << SMEARMUPIDTABLES << endl;
	if (TMath::Abs(SMEARMUPIDTABLES) > 0.001) fPTmu[mu]->shiftRel(SMEARMUPIDTABLES);
      } else {
	cout << "shifting mu mistables relative by " << SMEARMUMISTABLES << endl;
	if (TMath::Abs(SMEARMUMISTABLES) > 0.001) fPTmu[mu]->shiftRel(SMEARMUMISTABLES);
      }
      mu++;
    }
    if (TMath::Abs(sink) == 321) {
      cout << "Kaon Table " << ka << "  ->  " << tableName << endl;
      sprintf(fname, "%s%d_%d", selector, sink, source); 
      //      fPTka[ka].flush();
      fPTka[ka] = new PIDTable(tableName, fname);
      if (TMath::Abs(source) == TMath::Abs(sink)) {
	cout << "shifting ka pidtables relative by " << SMEARKAPIDTABLES << endl;
	if (TMath::Abs(SMEARKAPIDTABLES) > 0.001) fPTka[ka]->shiftRel(SMEARKAPIDTABLES);
      } else {
	cout << "shifting ka mistables relative by " << SMEARKAMISTABLES << endl;
	if (TMath::Abs(SMEARKAMISTABLES) > 0.001) fPTka[ka]->shiftRel(SMEARKAMISTABLES);
      }
      ka++;
    }
  }
}    

// ----------------------------------------------------------------------
void recoilNtp::readweightchg(){    

   char tableName[1000], buffer[200], fname[100];
   float pmax, thefactor;
   ifstream is(WEIGHTCHG);
   int i = 0;  
   while (is.getline(buffer, 200, '\n')) {
     if (buffer[0] == '#') {continue;}
     sscanf(buffer, "%f %f", &pmax, &thefactor);
     theweighttrk[i] = thefactor;     
     cout << "neutral " << thefactor << " " << i << endl;
     i++;
   }
}

// ----------------------------------------------------------------------
void recoilNtp::readweightneu(){    

  char tableName[1000], buffer[100], fname[100];
  float pmax, thefactor;
  ifstream is(WEIGHTNEU);
  int i = 0;  

   while (is.getline(buffer, 200, '\n')) {
     if (buffer[0] == '#') {continue;}
     sscanf(buffer, "%f %f", &pmax, &thefactor);
     theweightneu[i] = thefactor; 
     cout << "charged " << thefactor << " " << i << endl;
     i++;
   }
}

// ----------------------------------------------------------------------
void recoilNtp::readintpur(){    

   char tableName[1000], buffer[200], fname[100];
   float bmode, dmode, sig, bkg, pur, sb;
   ifstream is("tables/tablepurity.dat");
   int mode;
   while (is.getline(buffer, 200, '\n')) {
     if (buffer[0] == '#') {continue;}
     sscanf(buffer, "%f %f %f %f %f %f", &bmode, &dmode, &sig, &bkg, &pur, &sb);
     mode = (dmode+100) * 100 + bmode-10000;
     brecosig[mode] = sig;	
     brecobkg[mode] = bkg;
     brecointpur[mode] = pur; 
     
   }
	
}


// ----------------------------------------------------------------------
Double_t recoilNtp::getweightchg(double mom){    
  int thebin = mom/(3./20);
  if (mom>3.)thebin = 19; 
  if (mom<0.)thebin = 0; 
  return theweighttrk[thebin];
}

// ----------------------------------------------------------------------
Double_t recoilNtp::getweightneu(double mom){    
  int thebin = mom/(1.5/20);
  if (mom>1.5)thebin = 19; 
  if (mom<0.)thebin = 0; 
  return theweightneu[thebin];
}

// ----------------------------------------------------------------------
void recoilNtp::read_killTab(const char *lsfile) {

  if(lsfile == "") return; 

  cout<<" Reading this file for killing: "<<lsfile<<endl;

  int count(0);
  char Ifile[100], Ifile1[100], Ibuff[200], lsbuff[200];
  char ts[30];
  char val[100], tmpfl[100];

  fLkt = 0;
  map = new TMap(10,10);

  map2 = new TMap(10,10);
  TObjString *flag;

  ifstream lsev(lsfile);
  while (lsev.getline(lsbuff, 200, '\n')) {
    sscanf(lsbuff,"%s", Ifile1);
    count++;
    TString *val1 = new TString(Ifile1); 
    //    cout<<Ifile1<< " new file string "<<endl;   
    if ( val1->Contains("a_cand") ) {
      if  ( (val1->Contains("dzdz")) ) {
	sprintf(tmpfl,"1");
      } else if  ( (val1->Contains("dzdc")) || (val1->Contains("dcdz")) ){
	sprintf(tmpfl,"2");
      } else if  ( (val1->Contains("dzds")) || (val1->Contains("dsdz")) ){
	sprintf(tmpfl,"3");
      } else if  ( (val1->Contains("dzdsz")) ||  (val1->Contains("dszdz")) ){
	sprintf(tmpfl,"4");
      }

    } else if ( val1->Contains("b_cand") ) { 
	
      if  ( (val1->Contains("dcdz")) || (val1->Contains("dzdc")) ){
	sprintf(tmpfl,"41");
      } else if  ( (val1->Contains("dcdc")) ){
	sprintf(tmpfl,"42");
      } else if  ( (val1->Contains("dcds")) || (val1->Contains("dsdc")) ){
	sprintf(tmpfl,"43");
      } else if  ( (val1->Contains("dcdsz")) || (val1->Contains("dszdc")) ){
	sprintf(tmpfl,"44");
      }

    } else if ( val1->Contains("c_cand") ) {

      if  ( (val1->Contains("dsdz")) || (val1->Contains("dzds")) ){
	sprintf(tmpfl,"81");
      } else if  ( (val1->Contains("dsdc")) ||  (val1->Contains("dcds")) ){
	sprintf(tmpfl,"82");
      } else if  ( (val1->Contains("dsds")) ){
	sprintf(tmpfl,"83");
      } else if  ( (val1->Contains("dsdsz")) || (val1->Contains("dszds")) ){
	sprintf(tmpfl,"84");
      }
      
    } else if ( val1->Contains("d_cand") ) {

      if  ( (val1->Contains("dszdz")) || (val1->Contains("dzdsz")) ){
	sprintf(tmpfl,"121");
      } else if  ( (val1->Contains("dszdc")) || (val1->Contains("dcdsz")) ){
	sprintf(tmpfl,"122");
      } else if  ( (val1->Contains("dszds")) || (val1->Contains("dsdsz")) ){
	sprintf(tmpfl,"123");
      } else if  ( (val1->Contains("dszdsz")) ) {
	sprintf(tmpfl,"124");
      }

    } else if ( val1->Contains("e_cand") ) {

      if  ( (val1->Contains("dzdz")) ) {
	sprintf(tmpfl,"11");
      } else if  ( (val1->Contains("dzdc")) || (val1->Contains("dcdz")) ){
	sprintf(tmpfl,"12");
      } else if  ( (val1->Contains("dzds")) || (val1->Contains("dsdz")) ){
	sprintf(tmpfl,"13");
      } else if  ( (val1->Contains("dzdsz")) ||  (val1->Contains("dszdz")) ){
	sprintf(tmpfl,"14");
      }

    } else if ( val1->Contains("f_cand") ) {

      if  ( (val1->Contains("dcdz")) || (val1->Contains("dzdc")) ){
	sprintf(tmpfl,"51");
      } else if  ( (val1->Contains("dcdc")) ){
	sprintf(tmpfl,"52");
      } else if  ( (val1->Contains("dcds")) || (val1->Contains("dsdc")) ){
	sprintf(tmpfl,"53");
      } else if  ( (val1->Contains("dcdsz")) || (val1->Contains("dszdc")) ){
	sprintf(tmpfl,"54");
      }

    } else if ( val1->Contains("g_cand") ) {

      if  ( (val1->Contains("dsdz")) || (val1->Contains("dzds")) ){
	sprintf(tmpfl,"91");
      } else if  ( (val1->Contains("dsdc")) ||  (val1->Contains("dcds")) ){
	sprintf(tmpfl,"92");
      } else if  ( (val1->Contains("dsds")) ){
	sprintf(tmpfl,"93");
      } else if  ( (val1->Contains("dsdsz")) || (val1->Contains("dszds")) ){
	sprintf(tmpfl,"94");
      }
      
    } else if ( val1->Contains("h_cand") ) {

      if  ( (val1->Contains("dszdz")) || (val1->Contains("dzdsz")) ){
	sprintf(tmpfl,"131");
      } else if  ( (val1->Contains("dszdc")) || (val1->Contains("dcdsz")) ){
	sprintf(tmpfl,"132");
      } else if  ( (val1->Contains("dszds")) || (val1->Contains("dsdsz")) ){
	sprintf(tmpfl,"133");
      } else if  ( (val1->Contains("dszdsz")) ) {
	sprintf(tmpfl,"134");
      }

    } else if ( val1->Contains("i_cand") ) {

      if  ( (val1->Contains("dzdz")) ) {
	sprintf(tmpfl,"21");
      } else if  ( (val1->Contains("dzdc")) || (val1->Contains("dcdz")) ){
	sprintf(tmpfl,"22");
      } else if  ( (val1->Contains("dzds")) || (val1->Contains("dsdz")) ){
	sprintf(tmpfl,"23");
      } else if  ( (val1->Contains("dzdsz")) ||  (val1->Contains("dszdz")) ){
	sprintf(tmpfl,"24");
      }

    } else if ( val1->Contains("l_cand") ) {

      if  ( (val1->Contains("dcdz")) || (val1->Contains("dzdc")) ){
	sprintf(tmpfl,"61");
      } else if  ( (val1->Contains("dcdc")) ){
	sprintf(tmpfl,"62");
      } else if  ( (val1->Contains("dcds")) || (val1->Contains("dsdc")) ){
	sprintf(tmpfl,"63");
      } else if  ( (val1->Contains("dcdsz")) || (val1->Contains("dszdc")) ){
	sprintf(tmpfl,"64");
      }

    } else if ( val1->Contains("m_cand") ) {

      if  ( (val1->Contains("dsdz")) || (val1->Contains("dzds")) ){
	sprintf(tmpfl,"101");
      } else if  ( (val1->Contains("dsdc")) ||  (val1->Contains("dcds")) ){
	sprintf(tmpfl,"102");
      } else if  ( (val1->Contains("dsds")) ){
	sprintf(tmpfl,"103");
      } else if  ( (val1->Contains("dsdsz")) || (val1->Contains("dszds")) ){
	sprintf(tmpfl,"104");
      }

    } else if ( val1->Contains("n_cand") ) {

      if  ( (val1->Contains("dszdz")) || (val1->Contains("dzdsz")) ){
	sprintf(tmpfl,"141");
      } else if  ( (val1->Contains("dszdc")) || (val1->Contains("dcdsz")) ){
	sprintf(tmpfl,"142");
      } else if  ( (val1->Contains("dszds")) || (val1->Contains("dsdsz")) ){
	sprintf(tmpfl,"143");
      } else if  ( (val1->Contains("dszdsz")) ) {
	sprintf(tmpfl,"144");
      }

    } else if ( val1->Contains("o_cand") ) {

      if  ( (val1->Contains("dzdz")) ) {
	sprintf(tmpfl,"31");
      } else if  ( (val1->Contains("dzdc")) || (val1->Contains("dcdz")) ){
	sprintf(tmpfl,"32");
      } else if  ( (val1->Contains("dzds")) || (val1->Contains("dsdz")) ){
	sprintf(tmpfl,"33");
      } else if  ( (val1->Contains("dzdsz")) ||  (val1->Contains("dszdz")) ){
	sprintf(tmpfl,"34");
      }

    } else if ( val1->Contains("p_cand") ) {

      if  ( (val1->Contains("dcdz")) || (val1->Contains("dzdc")) ){
	sprintf(tmpfl,"71");
      } else if  ( (val1->Contains("dcdc")) ){
	sprintf(tmpfl,"72");
      } else if  ( (val1->Contains("dcds")) || (val1->Contains("dsdc")) ){
	sprintf(tmpfl,"73");
      } else if  ( (val1->Contains("dcdsz")) || (val1->Contains("dszdc")) ){
	sprintf(tmpfl,"74");
      }

    } else if ( val1->Contains("q_cand") ) {

      if  ( (val1->Contains("dsdz")) || (val1->Contains("dzds")) ){
	sprintf(tmpfl,"111");
      } else if  ( (val1->Contains("dsdc")) ||  (val1->Contains("dcds")) ){
	sprintf(tmpfl,"112");
      } else if  ( (val1->Contains("dsds")) ){
	sprintf(tmpfl,"113");
      } else if  ( (val1->Contains("dsdsz")) || (val1->Contains("dszds")) ){
	sprintf(tmpfl,"114");
      }

    } else if ( val1->Contains("r_cand") ) {

      if  ( (val1->Contains("dszdz")) || (val1->Contains("dzdsz")) ){
	sprintf(tmpfl,"151");
      } else if  ( (val1->Contains("dszdc")) || (val1->Contains("dcdsz")) ){
	sprintf(tmpfl,"152");
      } else if  ( (val1->Contains("dszds")) || (val1->Contains("dsdsz")) ){
	sprintf(tmpfl,"153");
      } else if  ( (val1->Contains("dszdsz")) ) {
	sprintf(tmpfl,"154");
      }

    } 
      // else {
      //Forget bout this printout
      // cout<<"Something really fishy"<<endl;
      //    }

    flag = new TObjString(tmpfl);

    //Tipical: m103dsdsz_0_d_cand
    sprintf(Ifile,"%s",Ifile1);

    ifstream Iev(Ifile);
    TObject *num;
    num = (TObject *)10;
    TObjString *stval;
    while (Iev.getline(Ibuff, 200, '\n')) {
      sprintf(val,"%d",fLkt);
      stval = new TObjString(val);
      sscanf(Ibuff,"%s", ts);
      TObjString *st = new TObjString(ts);
//      cout<<ts<<endl;
//      cout<<flag<<endl;
      map->Add(stval,st);
      map2->Add(stval,flag);
      fLkt++;
    }
  }
    cout <<fLkt<< " :Num of lines"<<endl; 
}
